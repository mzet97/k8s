# Configuração de DNS para Redis
# Este arquivo contém exemplos de configuração DNS para facilitar o acesso ao Redis

# Opção 1: ConfigMap com entradas DNS personalizadas
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-dns-config
  namespace: redis
data:
  # Entradas para /etc/hosts
  hosts: |
    # Redis Kubernetes Cluster
    # Substitua <NODE_IP> pelo IP real do seu nó
    <NODE_IP> redis.local
    <NODE_IP> redis-proxy.local
    <NODE_IP> redis-master.local
    <NODE_IP> redis-replica.local
    
    # Exemplos com domínio corporativo
    <NODE_IP> redis.empresa.com
    <NODE_IP> redis-proxy.empresa.com
    <NODE_IP> redis-master.empresa.com
    <NODE_IP> redis-replica.empresa.com

  # Script para configurar DNS automaticamente
  setup-dns.sh: |
    #!/bin/bash
    
    # Obter IP do nó automaticamente
    NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    
    if [ -z "$NODE_IP" ]; then
        echo "Erro: Não foi possível obter o IP do nó"
        exit 1
    fi
    
    echo "IP do nó detectado: $NODE_IP"
    
    # Backup do arquivo hosts
    sudo cp /etc/hosts /etc/hosts.backup.$(date +%Y%m%d_%H%M%S)
    
    # Remover entradas antigas do Redis
    sudo sed -i '/# Redis Kubernetes/,/# End Redis Kubernetes/d' /etc/hosts
    
    # Adicionar novas entradas
    echo "" | sudo tee -a /etc/hosts
    echo "# Redis Kubernetes" | sudo tee -a /etc/hosts
    echo "$NODE_IP redis.local" | sudo tee -a /etc/hosts
    echo "$NODE_IP redis-proxy.local" | sudo tee -a /etc/hosts
    echo "$NODE_IP redis-master.local" | sudo tee -a /etc/hosts
    echo "$NODE_IP redis-replica.local" | sudo tee -a /etc/hosts
    echo "# End Redis Kubernetes" | sudo tee -a /etc/hosts
    
    echo "DNS configurado com sucesso!"
    echo "Teste a conectividade:"
    echo "  redis-cli -h redis-proxy.local -p 30379 -a Admin@123 ping"

  # Script para Windows (PowerShell)
  setup-dns.ps1: |
    # Script PowerShell para configurar DNS no Windows
    
    # Obter IP do nó
    $NODE_IP = kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}'
    
    if (-not $NODE_IP) {
        Write-Error "Não foi possível obter o IP do nó"
        exit 1
    }
    
    Write-Host "IP do nó detectado: $NODE_IP"
    
    # Caminho do arquivo hosts no Windows
    $hostsFile = "C:\Windows\System32\drivers\etc\hosts"
    
    # Backup do arquivo hosts
    $backupFile = "$hostsFile.backup.$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Copy-Item $hostsFile $backupFile
    
    # Ler conteúdo atual
    $content = Get-Content $hostsFile
    
    # Remover entradas antigas do Redis
    $newContent = @()
    $skipLines = $false
    
    foreach ($line in $content) {
        if ($line -match "# Redis Kubernetes") {
            $skipLines = $true
            continue
        }
        if ($line -match "# End Redis Kubernetes") {
            $skipLines = $false
            continue
        }
        if (-not $skipLines) {
            $newContent += $line
        }
    }
    
    # Adicionar novas entradas
    $newContent += ""
    $newContent += "# Redis Kubernetes"
    $newContent += "$NODE_IP redis.local"
    $newContent += "$NODE_IP redis-proxy.local"
    $newContent += "$NODE_IP redis-master.local"
    $newContent += "$NODE_IP redis-replica.local"
    $newContent += "# End Redis Kubernetes"
    
    # Escrever arquivo atualizado
    $newContent | Set-Content $hostsFile
    
    Write-Host "DNS configurado com sucesso!"
    Write-Host "Teste a conectividade:"
    Write-Host "  redis-cli -h redis-proxy.local -p 30379 -a Admin@123 ping"

---
# Opção 2: CoreDNS ConfigMap (para clusters que usam CoreDNS)
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-coredns-config
  namespace: kube-system
data:
  redis.db: |
    ; Redis DNS Zone
    $ORIGIN redis.local.
    $TTL 300
    
    @       IN  SOA ns1.redis.local. admin.redis.local. (
                2024010101  ; serial
                3600        ; refresh
                1800        ; retry
                604800      ; expire
                300 )       ; minimum
    
    @       IN  NS  ns1.redis.local.
    ns1     IN  A   <NODE_IP>
    
    ; Redis Services
    redis-proxy     IN  A   <NODE_IP>
    redis-master    IN  A   <NODE_IP>
    redis-replica   IN  A   <NODE_IP>
    
    ; Aliases
    redis           IN  CNAME   redis-proxy
    db              IN  CNAME   redis-proxy
    cache           IN  CNAME   redis-proxy

---
# Opção 3: Ingress para acesso via HTTP (para ferramentas web)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redis-stats-ingress
  namespace: redis
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: redis-stats.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-proxy-service
            port:
              number: 8404
  - host: redis-stats.empresa.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-proxy-service
            port:
              number: 8404

---
# Service para facilitar descoberta DNS interna
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: redis
  labels:
    app: redis
    service: redis-alias
spec:
  type: ExternalName
  externalName: redis-proxy-service.redis.svc.cluster.local
  ports:
  - port: 6379
    targetPort: 6379
    name: redis

---
# Headless service para descoberta de todos os endpoints
apiVersion: v1
kind: Service
metadata:
  name: redis-all-endpoints
  namespace: redis
  labels:
    app: redis
    service: redis-discovery
spec:
  clusterIP: None
  ports:
  - port: 6379
    name: redis
  - port: 6380
    name: redis-tls
  selector:
    app: redis-proxy

---
# ConfigMap com instruções de uso
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-dns-instructions
  namespace: redis
data:
  README.md: |
    # Configuração de DNS para Redis
    
    ## Métodos de Configuração
    
    ### 1. Configuração Manual do /etc/hosts
    
    #### Linux/Mac:
    ```bash
    # Obter IP do nó
    NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    
    # Adicionar ao /etc/hosts
    echo "$NODE_IP redis.local" | sudo tee -a /etc/hosts
    echo "$NODE_IP redis-proxy.local" | sudo tee -a /etc/hosts
    ```
    
    #### Windows:
    ```powershell
    # Executar como Administrador
    $NODE_IP = kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}'
    Add-Content C:\Windows\System32\drivers\etc\hosts "$NODE_IP redis.local"
    Add-Content C:\Windows\System32\drivers\etc\hosts "$NODE_IP redis-proxy.local"
    ```
    
    ### 2. Script Automatizado
    
    #### Linux/Mac:
    ```bash
    # Extrair e executar script
    kubectl get configmap -n redis redis-dns-config -o jsonpath='{.data.setup-dns\.sh}' > setup-dns.sh
    chmod +x setup-dns.sh
    ./setup-dns.sh
    ```
    
    #### Windows:
    ```powershell
    # Extrair e executar script
    kubectl get configmap -n redis redis-dns-config -o jsonpath='{.data.setup-dns\.ps1}' > setup-dns.ps1
    .\setup-dns.ps1
    ```
    
    ### 3. Teste de Conectividade
    
    ```bash
    # Testar resolução DNS
    nslookup redis.local
    ping redis.local
    
    # Testar conexão Redis
    redis-cli -h redis.local -p 30379 -a Admin@123 ping
    redis-cli -h redis-proxy.local -p 30379 -a Admin@123 ping
    ```
    
    ### 4. URLs de Acesso
    
    - **Redis via Proxy**: `redis://redis.local:30379`
    - **Redis com TLS**: `rediss://redis.local:30380`
    - **HAProxy Stats**: `http://redis.local:30404/stats`
    
    ### 5. Configuração para Aplicações
    
    #### Python:
    ```python
    import redis
    r = redis.Redis(host='redis.local', port=30379, password='Admin@123')
    ```
    
    #### Node.js:
    ```javascript
    const redis = require('redis');
    const client = redis.createClient({
        host: 'redis.local',
        port: 30379,
        password: 'Admin@123'
    });
    ```
    
    #### Java:
    ```java
    JedisPool pool = new JedisPool("redis.local", 30379, "Admin@123");
    ```

  usage-examples.md: |
    # Exemplos de Uso com DNS
    
    ## Conexões de Aplicação
    
    ### Spring Boot (application.yml)
    ```yaml
    spring:
      redis:
        host: redis.local
        port: 30379
        password: Admin@123
        timeout: 2000ms
    ```
    
    ### Django (settings.py)
    ```python
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://redis.local:30379/1',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'PASSWORD': 'Admin@123',
            }
        }
    }
    ```
    
    ### Laravel (.env)
    ```env
    REDIS_HOST=redis.local
    REDIS_PASSWORD=Admin@123
    REDIS_PORT=30379
    ```
    
    ### Docker Compose
    ```yaml
    version: '3.8'
    services:
      app:
        image: myapp:latest
        environment:
          - REDIS_URL=redis://redis.local:30379
          - REDIS_PASSWORD=Admin@123
        extra_hosts:
          - "redis.local:<NODE_IP>"
    ```
    
    ## Ferramentas de Monitoramento
    
    ### Grafana Datasource
    ```yaml
    apiVersion: 1
    datasources:
      - name: Redis
        type: redis-datasource
        url: redis://redis.local:30379
        jsonData:
          password: Admin@123
    ```
    
    ### Prometheus Redis Exporter
    ```yaml
    - job_name: 'redis'
      static_configs:
        - targets: ['redis.local:30379']
      params:
        password: ['Admin@123']
    ```