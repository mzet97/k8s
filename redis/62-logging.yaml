# ConfigMap para configuração do Fluent Bit
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: redis
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    [INPUT]
        Name              tail
        Path              /var/log/redis/*.log
        Parser            redis
        Tag               redis.*
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Skip_Empty_Lines  On

    [INPUT]
        Name              tail
        Path              /var/log/containers/*redis*.log
        Parser            docker
        Tag               kube.*
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Skip_Empty_Lines  On

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On

    [FILTER]
        Name          modify
        Match         redis.*
        Add           service redis
        Add           environment production
        Add           cluster redis-cluster

    [FILTER]
        Name          grep
        Match         *
        Exclude       level DEBUG

    [OUTPUT]
        Name          stdout
        Match         *
        Format        json_lines

    # Uncomment below for Elasticsearch output
    # [OUTPUT]
    #     Name          es
    #     Match         *
    #     Host          elasticsearch.logging.svc.cluster.local
    #     Port          9200
    #     Index         redis-logs
    #     Type          _doc
    #     Logstash_Format On
    #     Logstash_Prefix redis
    #     Retry_Limit   False
    #     Replace_Dots  On
    #     Remove_Keys   kubernetes

  parsers.conf: |
    [PARSER]
        Name        redis
        Format      regex
        Regex       ^(?<time>\d{1,2}:\d{2}:\d{2}\.\d{3}) (?<level>\w+) (?<message>.*)
        Time_Key    time
        Time_Format %H:%M:%S.%L
        Time_Keep   On

    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

    [PARSER]
        Name        redis_slowlog
        Format      regex
        Regex       ^(?<id>\d+) (?<timestamp>\d+) (?<duration>\d+) (?<command>.*)
        Types       id:integer timestamp:integer duration:integer
---
# ServiceAccount para Fluent Bit
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: redis
---
# ClusterRole para Fluent Bit
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - nodes
  verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding para Fluent Bit
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: redis
---
# DaemonSet do Fluent Bit
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: redis
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
        prometheus.io/path: "/api/v1/metrics/prometheus"
    spec:
      serviceAccountName: fluent-bit
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:2.2.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2020
          name: http
        volumeMounts:
        - name: config
          mountPath: /fluent-bit/etc/
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: redis-logs
          mountPath: /var/log/redis
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: fluent-bit-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: redis-logs
        emptyDir: {}
---
# Service para Fluent Bit metrics
apiVersion: v1
kind: Service
metadata:
  name: fluent-bit
  namespace: redis
  labels:
    app: fluent-bit
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "2020"
    prometheus.io/path: "/api/v1/metrics/prometheus"
spec:
  selector:
    app: fluent-bit
  ports:
  - name: http
    port: 2020
    targetPort: 2020
---
# ConfigMap para configuração de log rotation
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-logrotate
  namespace: redis
data:
  logrotate.conf: |
    /var/log/redis/*.log {
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 0644 redis redis
        postrotate
            /bin/kill -USR1 $(cat /var/run/redis/redis.pid 2>/dev/null) 2>/dev/null || true
        endscript
    }
---
# CronJob para log rotation
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-logrotate
  namespace: redis
spec:
  schedule: "0 2 * * *"  # Diariamente às 2:00 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: logrotate
            image: alpine:3.18
            command:
            - sh
            - -c
            - |
              apk add --no-cache logrotate
              logrotate -f /etc/logrotate.d/redis
            volumeMounts:
            - name: logrotate-config
              mountPath: /etc/logrotate.d/redis
              subPath: logrotate.conf
            - name: redis-logs
              mountPath: /var/log/redis
            resources:
              requests:
                memory: "32Mi"
                cpu: "10m"
              limits:
                memory: "64Mi"
                cpu: "100m"
          volumes:
          - name: logrotate-config
            configMap:
              name: redis-logrotate
          - name: redis-logs
            emptyDir: {}