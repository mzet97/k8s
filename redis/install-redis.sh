#!/bin/bash

# Script de Instala√ß√£o do Redis Master-Replica no Kubernetes
# Baseado na documenta√ß√£o do README.md
# Executa os comandos na ordem correta para instala√ß√£o completa

set -e  # Parar execu√ß√£o em caso de erro

echo "üöÄ Iniciando instala√ß√£o do Redis Master-Replica no Kubernetes..."
echo ""

# Verificar se microk8s est√° dispon√≠vel
if ! command -v microk8s &> /dev/null; then
    echo "‚ùå Erro: microk8s n√£o encontrado. Instale o MicroK8s primeiro."
    exit 1
fi

echo "üìã Pr√©-requisitos verificados"
echo ""

# 1. Criar namespace e configura√ß√µes b√°sicas
echo "1Ô∏è‚É£ Criando namespace e configura√ß√µes b√°sicas..."
microk8s kubectl apply -f 00-namespace.yaml
microk8s kubectl apply -f 01-secret.yaml
microk8s kubectl apply -f 03-rbac.yaml
echo "‚úÖ Namespace e configura√ß√µes b√°sicas criadas"
echo ""

# 2. Configurar TLS e certificados
echo "2Ô∏è‚É£ Configurando TLS e certificados..."
microk8s kubectl apply -f 02-tls-certificates.yaml
echo "‚úÖ Certificados TLS configurados"
echo ""

# Aguardar certificados serem criados
echo "‚è≥ Aguardando certificados TLS serem criados..."
echo "Verificando se o secret redis-tls-secret foi criado..."

# Aguardar at√© 120 segundos pelos certificados
for i in {1..24}; do
    if microk8s kubectl get secret redis-tls-secret -n redis >/dev/null 2>&1; then
        echo "‚úÖ Secret redis-tls-secret criado com sucesso!"
        break
    fi
    echo "Tentativa $i/24: Aguardando secret redis-tls-secret..."
    sleep 5
done

# Verificar se o secret foi criado
if ! microk8s kubectl get secret redis-tls-secret -n redis >/dev/null 2>&1; then
    echo "‚ùå Erro: Secret redis-tls-secret n√£o foi criado ap√≥s 120 segundos"
    echo "Verifique os logs do cert-manager:"
    echo "microk8s kubectl logs -n cert-manager -l app=cert-manager"
    exit 1
fi

microk8s kubectl -n redis get certificates
echo ""

# 3. Configurar Redis (ConfigMaps e Services)
echo "3Ô∏è‚É£ Configurando Redis (ConfigMaps e Services)..."
microk8s kubectl apply -f 10-configmap.yaml
microk8s kubectl apply -f 11-headless-svc.yaml
microk8s kubectl apply -f 12-client-svc.yaml
microk8s kubectl apply -f 13-master-svc.yaml
echo "‚úÖ ConfigMaps e Services configurados"
echo ""

# 4. Implantar Redis Master e R√©plicas
echo "4Ô∏è‚É£ Implantando Redis Master e R√©plicas..."
microk8s kubectl apply -f 21-master-statefulset.yaml
microk8s kubectl apply -f 22-replica-statefulset.yaml
echo "‚úÖ Redis Master e R√©plicas implantados"
echo ""

# Aguardar pods estarem prontos
echo "‚è≥ Aguardando pods Redis estarem prontos..."
echo "Verificando se os pods Redis Master e Replica est√£o funcionando..."

# Aguardar at√© 180 segundos pelos pods
for i in {1..36}; do
    READY_PODS=$(microk8s kubectl get pods -n redis -l 'app in (redis-master,redis-replica)' --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    TOTAL_PODS=$(microk8s kubectl get pods -n redis -l 'app in (redis-master,redis-replica)' --no-headers 2>/dev/null | wc -l || echo "0")
    
    if [ "$READY_PODS" -gt 0 ] && [ "$READY_PODS" -eq "$TOTAL_PODS" ]; then
        echo "‚úÖ Todos os pods Redis est√£o funcionando ($READY_PODS/$TOTAL_PODS)!"
        break
    fi
    echo "Tentativa $i/36: Pods prontos: $READY_PODS/$TOTAL_PODS"
    sleep 5
done

microk8s kubectl -n redis get pods
echo ""

# 5. Configurar replica√ß√£o
echo "5Ô∏è‚É£ Configurando replica√ß√£o..."
microk8s kubectl apply -f 31-replication-setup-job.yaml
echo "‚úÖ Replica√ß√£o configurada"
echo ""

# 6. Configurar acesso externo
echo "6Ô∏è‚É£ Configurando acesso externo..."
microk8s kubectl apply -f 42-redis-proxy-tls.yaml
microk8s kubectl apply -f 43-dns-config.yaml
echo "‚úÖ Acesso externo configurado"
echo ""

# 7. Configurar monitoramento e backup (opcional)
echo "7Ô∏è‚É£ Configurando monitoramento e backup (opcional)..."
microk8s kubectl apply -f 50-backup-cronjob.yaml
# microk8s kubectl apply -f 60-monitoring.yaml  # Temporariamente desativado
microk8s kubectl apply -f 70-high-availability.yaml
echo "‚úÖ Monitoramento e backup configurados"
echo ""

# Verifica√ß√£o da instala√ß√£o
echo "üîç Verificando instala√ß√£o..."
echo ""

echo "üìä Status dos pods:"
microk8s kubectl -n redis get pods
echo ""

echo "üåê Servi√ßos dispon√≠veis:"
microk8s kubectl -n redis get svc
echo ""

echo "üîê Certificados TLS:"
microk8s kubectl -n redis get certificates
echo ""

# Obter IP do n√≥ para configura√ß√£o DNS
NODE_IP=$(microk8s kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
echo "üì° IP do n√≥ Kubernetes: $NODE_IP"
echo ""

echo "üéâ Instala√ß√£o conclu√≠da com sucesso!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Configure o DNS local adicionando ao arquivo hosts:"
echo "   $NODE_IP redis.home.arpa"
echo "   $NODE_IP redis-proxy.home.arpa"
echo ""
echo "2. Teste a conectividade:"
echo "   redis-cli -h redis.home.arpa -p 30379 -a Admin@123 ping"
echo ""
echo "3. Acesse o dashboard HAProxy:"
echo "   http://redis.home.arpa:30404/stats (admin/admin123)"
echo ""
echo "üìö Consulte o README.md para mais informa√ß√µes sobre testes e uso."