#!/bin/bash

# Script de remo√ß√£o do Redis instalado via Helm
# Remove completamente a instala√ß√£o incluindo PVCs e secrets

set -e

echo "üóëÔ∏è  Remo√ß√£o do Redis Helm - Bitnami"
echo "ATEN√á√ÉO: Esta opera√ß√£o √© irrevers√≠vel!"
echo "======================================"

# Confirma√ß√£o do usu√°rio
read -p "Tem certeza que deseja remover completamente o Redis? (digite 'sim' para confirmar): " confirmation
if [ "$confirmation" != "sim" ]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio."
    exit 0
fi

echo "üöÄ Iniciando remo√ß√£o do Redis..."

# Verificar se MicroK8s est√° dispon√≠vel
if ! command -v microk8s &> /dev/null; then
    echo "‚ùå MicroK8s n√£o encontrado. Instale o MicroK8s primeiro."
    exit 1
fi

# Verificar se MicroK8s est√° rodando
if ! microk8s status --wait-ready --timeout 30 &> /dev/null; then
    echo "‚ùå MicroK8s n√£o est√° rodando ou n√£o est√° pronto."
    echo "   Execute: microk8s start"
    exit 1
fi

# Verificar se helm3 est√° habilitado no MicroK8s
if microk8s helm3 version &> /dev/null; then
    MANUAL_REMOVAL=false
else
    echo "‚ö†Ô∏è  Helm3 n√£o est√° habilitado no MicroK8s. Tentaremos remo√ß√£o manual."
    MANUAL_REMOVAL=true
fi



# Verificar se o namespace existe
if ! microk8s kubectl get namespace redis &> /dev/null; then
    echo "‚ö†Ô∏è  Namespace 'redis' n√£o encontrado. Pode j√° ter sido removido."
    exit 0
fi

# Passo 1: Remover release do Helm (se dispon√≠vel)
if [ "$MANUAL_REMOVAL" = false ]; then
    echo "üóëÔ∏è  Passo 1: Removendo release do Helm..."
    if helm list -n redis | grep -q redis-cluster; then
        microk8s helm3 uninstall redis-cluster -n redis
        echo "‚úÖ Release do Helm removido"
    else
        echo "‚ö†Ô∏è  Release 'redis-cluster' n√£o encontrado no Helm"
    fi
else
    echo "üóëÔ∏è  Passo 1: Remo√ß√£o manual (Helm n√£o dispon√≠vel)..."
fi

# Passo 2: Remover recursos manualmente
echo "üóëÔ∏è  Passo 2: Removendo recursos Kubernetes..."

# Remover StatefulSets
echo "   Removendo StatefulSets..."
microk8s kubectl delete statefulset --all -n redis --ignore-not-found=true

# Remover Deployments
echo "   Removendo Deployments..."
microk8s kubectl delete deployment --all -n redis --ignore-not-found=true

# Remover Services
echo "   Removendo Services..."
microk8s kubectl delete service --all -n redis --ignore-not-found=true

# Remover ConfigMaps
echo "   Removendo ConfigMaps..."
microk8s kubectl delete configmap --all -n redis --ignore-not-found=true

# Remover Secrets (exceto TLS que pode ser reutilizado)
echo "   Removendo Secrets do Redis..."
microk8s kubectl delete secret -l app.kubernetes.io/name=redis -n redis --ignore-not-found=true

# Passo 3: Remover PVCs (dados persistentes)
echo "üóëÔ∏è  Passo 3: Removendo volumes persistentes..."
echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso remover√° todos os dados do Redis!"
read -p "Confirma remo√ß√£o dos dados persistentes? (digite 'sim'): " pvc_confirmation
if [ "$pvc_confirmation" = "sim" ]; then
    microk8s kubectl delete pvc --all -n redis --ignore-not-found=true
    echo "‚úÖ PVCs removidos (dados perdidos)"
else
    echo "‚ö†Ô∏è  PVCs mantidos (dados preservados)"
    echo "   Para remover manualmente: kubectl delete pvc --all -n redis"
fi

# Passo 4: Remover PVs √≥rf√£os (se existirem)
echo "üóëÔ∏è  Passo 4: Verificando PVs √≥rf√£os..."
ORPHAN_PVS=$(microk8s kubectl get pv | grep redis | grep Available | awk '{print $1}' || true)
if [ -n "$ORPHAN_PVS" ]; then
    echo "   Encontrados PVs √≥rf√£os: $ORPHAN_PVS"
    read -p "Remover PVs √≥rf√£os? (digite 'sim'): " pv_confirmation
    if [ "$pv_confirmation" = "sim" ]; then
        echo "$ORPHAN_PVS" | xargs microk8s kubectl delete pv --ignore-not-found=true
        echo "‚úÖ PVs √≥rf√£os removidos"
    else
        echo "‚ö†Ô∏è  PVs √≥rf√£os mantidos"
    fi
else
    echo "‚úÖ Nenhum PV √≥rf√£o encontrado"
fi

# Passo 5: Remover certificados TLS (opcional)
echo "üóëÔ∏è  Passo 5: Certificados TLS..."
if microk8s kubectl get certificate redis-tls-cert -n redis &> /dev/null; then
    read -p "Remover certificados TLS? (digite 'sim' se n√£o for reutilizar): " tls_confirmation
    if [ "$tls_confirmation" = "sim" ]; then
        microk8s kubectl delete certificate redis-tls-cert -n redis --ignore-not-found=true
        microk8s kubectl delete secret redis-tls-secret -n redis --ignore-not-found=true
        echo "‚úÖ Certificados TLS removidos"
    else
        echo "‚ö†Ô∏è  Certificados TLS mantidos para reutiliza√ß√£o"
    fi
else
    echo "‚úÖ Nenhum certificado TLS encontrado"
fi

# Passo 6: Aguardar finaliza√ß√£o
echo "‚è≥ Passo 6: Aguardando finaliza√ß√£o da remo√ß√£o..."
sleep 10

# Verificar se ainda existem recursos
echo "üîç Verificando recursos restantes..."
REMAINING_PODS=$(microk8s kubectl get pods -n redis --no-headers 2>/dev/null | wc -l || echo "0")
REMAINING_SVCS=$(microk8s kubectl get svc -n redis --no-headers 2>/dev/null | wc -l || echo "0")
REMAINING_PVCS=$(microk8s kubectl get pvc -n redis --no-headers 2>/dev/null | wc -l || echo "0")

if [ "$REMAINING_PODS" -eq 0 ] && [ "$REMAINING_SVCS" -eq 0 ]; then
    echo "‚úÖ Todos os recursos principais removidos"
else
    echo "‚ö†Ô∏è  Alguns recursos ainda existem:"
    echo "   Pods: $REMAINING_PODS"
    echo "   Services: $REMAINING_SVCS"
    echo "   PVCs: $REMAINING_PVCS"
    echo "   Execute: kubectl get all -n redis"
fi

# Passo 7: Op√ß√£o de remover namespace
echo "üóëÔ∏è  Passo 7: Namespace redis..."
read -p "Remover namespace 'redis' completamente? (digite 'sim'): " ns_confirmation
if [ "$ns_confirmation" = "sim" ]; then
    microk8s kubectl delete namespace redis --ignore-not-found=true
    echo "‚úÖ Namespace 'redis' removido"
    echo "‚è≥ Aguardando finaliza√ß√£o do namespace..."
    while microk8s kubectl get namespace redis &> /dev/null; do
        echo "   Aguardando namespace ser removido..."
        sleep 5
    done
    echo "‚úÖ Namespace completamente removido"
else
    echo "‚ö†Ô∏è  Namespace 'redis' mantido"
    echo "   Para remover manualmente: kubectl delete namespace redis"
fi

# Passo 8: Limpeza do Helm (reposit√≥rio)
if [ "$MANUAL_REMOVAL" = false ]; then
    echo "üóëÔ∏è  Passo 8: Limpeza do reposit√≥rio Helm..."
    read -p "Remover reposit√≥rio Bitnami do Helm? (digite 'sim'): " repo_confirmation
    if [ "$repo_confirmation" = "sim" ]; then
        microk8s helm3 repo remove bitnami || echo "‚ö†Ô∏è  Reposit√≥rio Bitnami n√£o encontrado"
        echo "‚úÖ Reposit√≥rio Bitnami removido"
    else
        echo "‚ö†Ô∏è  Reposit√≥rio Bitnami mantido"
    fi
fi

# Resumo final
echo ""
echo "üéâ RESUMO DA REMO√á√ÉO"
echo "==================="
echo "‚úÖ Release Helm: Removido"
echo "‚úÖ Recursos K8s: Removidos"
if [ "$pvc_confirmation" = "sim" ]; then
    echo "‚úÖ Dados persistentes: Removidos"
else
    echo "‚ö†Ô∏è  Dados persistentes: Mantidos"
fi
if [ "$tls_confirmation" = "sim" ]; then
    echo "‚úÖ Certificados TLS: Removidos"
else
    echo "‚ö†Ô∏è  Certificados TLS: Mantidos"
fi
if [ "$ns_confirmation" = "sim" ]; then
    echo "‚úÖ Namespace: Removido"
else
    echo "‚ö†Ô∏è  Namespace: Mantido"
fi
echo ""
echo "üöÄ Remo√ß√£o do Redis Helm conclu√≠da!"
echo ""
echo "üìã Para reinstalar:"
echo "   cd redis-helm"
echo "   ./install-redis-helm.sh"
echo ""
echo "üîç Para verificar limpeza:"
echo "   microk8s kubectl get all,pvc,secrets,certificates -n redis"
echo "   microk8s helm3 list -n redis"