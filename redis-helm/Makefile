# Makefile para Redis Helm
# Facilita o gerenciamento do Redis com comandos simples

.PHONY: help install test status logs clean remove upgrade backup restore

# Vari√°veis
NAMESPACE := redis
RELEASE_NAME := redis-cluster
CHART_NAME := bitnami/redis
VALUES_FILE := values.yaml
HPA_FILE := hpa-config.yaml
MICROK8S := microk8s

# Comando padr√£o
help: ## Mostra esta ajuda
	@echo "Redis Helm - Comandos Dispon√≠veis:"
	@echo "================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Instala√ß√£o
install: ## Instala o Redis com Helm
	@echo "üöÄ Instalando Redis com Helm via MicroK8s..."
	@./install-redis-helm.sh

install-manual: ## Instala√ß√£o manual passo a passo
	@echo "üì¶ Adicionando reposit√≥rio Bitnami..."
	helm repo add bitnami https://charts.bitnami.com/bitnami
	helm repo update
	@echo "üèóÔ∏è Criando namespace..."
	kubectl create namespace $(NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -
	@echo "üöÄ Instalando Redis..."
	helm upgrade --install $(RELEASE_NAME) $(CHART_NAME) \
		--namespace $(NAMESPACE) \
		--values $(VALUES_FILE) \
		--wait --timeout=600s
	@echo "üìà Aplicando HPA..."
	kubectl apply -f $(HPA_FILE)
	@echo "‚úÖ Instala√ß√£o conclu√≠da!"

# Testes
test: ## Executa testes completos
	@echo "üß™ Executando testes..."
	@./test-redis-helm.sh

test-connection: ## Testa apenas conectividade
	@echo "üîó Testando conectividade..."
	@kubectl run redis-test --rm -i --restart=Never --namespace $(NAMESPACE) \
		--image docker.io/bitnami/redis:7.2.4-debian-11-r0 --command -- bash -c \
		"REDISCLI_AUTH=$$(kubectl get secret $(RELEASE_NAME) -n $(NAMESPACE) -o jsonpath='{.data.redis-password}' | base64 -d) && \
		redis-cli -h $(RELEASE_NAME)-master.$(NAMESPACE).svc.cluster.local -p 6379 --tls --insecure ping"

# Status e monitoramento
status: ## Mostra status completo
	@echo "üìä Status do Redis Helm"
	@echo "======================"
	@echo "üì¶ Release Helm:"
	$(MICROK8S) helm3 list -n $(NAMESPACE)
	@echo ""
	@echo "üèÉ Pods:"
	$(MICROK8S) kubectl get pods -n $(NAMESPACE) -o wide
	@echo ""
	@echo "üåê Services:"
	$(MICROK8S) kubectl get svc -n $(NAMESPACE)
	@echo ""
	@echo "üíæ PVCs:"
	$(MICROK8S) kubectl get pvc -n $(NAMESPACE)
	@echo ""
	@echo "üìà HPA:"
	$(MICROK8S) kubectl get hpa -n $(NAMESPACE)
	@echo ""
	@echo "üîê Secrets:"
	$(MICROK8S) kubectl get secrets -n $(NAMESPACE)

info: ## Mostra informa√ß√µes de conex√£o
	@echo "üìã Informa√ß√µes de Conex√£o"
	@echo "========================"
	@echo "üîë Senha do Redis:"
	@kubectl get secret $(RELEASE_NAME) -n $(NAMESPACE) -o jsonpath='{.data.redis-password}' | base64 -d
	@echo ""
	@echo ""
	@echo "üîó Endpoints:"
	@echo "   Master: $(RELEASE_NAME)-master.$(NAMESPACE).svc.cluster.local:6379"
	@echo "   Replicas: $(RELEASE_NAME)-replica.$(NAMESPACE).svc.cluster.local:6379"
	@echo "   M√©tricas: $(RELEASE_NAME)-metrics.$(NAMESPACE).svc.cluster.local:9121"

password: ## Mostra apenas a senha do Redis
	@$(MICROK8S) kubectl get secret $(RELEASE_NAME) -n $(NAMESPACE) -o jsonpath='{.data.redis-password}' | base64 -d

# Logs
logs: ## Mostra logs de todos os pods
	@echo "üìú Logs do Redis"
	@echo "==============="
	@echo "üìä Master:"
	$(MICROK8S) kubectl logs -f $(RELEASE_NAME)-master-0 -n $(NAMESPACE) --tail=50

logs-master: ## Logs apenas do master
	kubectl logs -f $(RELEASE_NAME)-master-0 -n $(NAMESPACE)

logs-replica: ## Logs das replicas
	@echo "üìä Replica 0:"
	kubectl logs $(RELEASE_NAME)-replica-0 -n $(NAMESPACE) --tail=20
	@echo "üìä Replica 1:"
	kubectl logs $(RELEASE_NAME)-replica-1 -n $(NAMESPACE) --tail=20
	@echo "üìä Replica 2:"
	kubectl logs $(RELEASE_NAME)-replica-2 -n $(NAMESPACE) --tail=20

logs-metrics: ## Logs do redis-exporter
	kubectl logs -l app.kubernetes.io/component=metrics -n $(NAMESPACE)

# Gerenciamento
upgrade: ## Atualiza o Redis com novas configura√ß√µes
	@echo "‚¨ÜÔ∏è Atualizando Redis..."
	$(MICROK8S) helm3 upgrade $(RELEASE_NAME) $(CHART_NAME) \
		--namespace $(NAMESPACE) \
		--values $(VALUES_FILE) \
		--wait
	@echo "‚úÖ Atualiza√ß√£o conclu√≠da!"

rollback: ## Faz rollback para vers√£o anterior
	@echo "‚è™ Fazendo rollback..."
	helm rollback $(RELEASE_NAME) -n $(NAMESPACE)
	@echo "‚úÖ Rollback conclu√≠do!"

history: ## Mostra hist√≥rico de releases
	helm history $(RELEASE_NAME) -n $(NAMESPACE)

values: ## Mostra valores atuais do Helm
	helm get values $(RELEASE_NAME) -n $(NAMESPACE)

# Backup e Restore
backup: ## Cria backup do Redis
	@echo "üíæ Criando backup..."
	@mkdir -p backups
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S) && \
	$(MICROK8S) kubectl exec $(RELEASE_NAME)-master-0 -n $(NAMESPACE) -- \
		redis-cli --rdb /tmp/backup_$$TIMESTAMP.rdb && \
	$(MICROK8S) kubectl cp $(RELEASE_NAME)-master-0:/tmp/backup_$$TIMESTAMP.rdb \
		./backups/backup_$$TIMESTAMP.rdb -n $(NAMESPACE) && \
	echo "‚úÖ Backup criado: backups/backup_$$TIMESTAMP.rdb"

list-backups: ## Lista backups dispon√≠veis
	@echo "üìÅ Backups dispon√≠veis:"
	@ls -la backups/ 2>/dev/null || echo "Nenhum backup encontrado"

# Conectividade
connect: ## Conecta ao Redis Master via CLI
	@echo "üîó Conectando ao Redis Master..."
	$(MICROK8S) kubectl run redis-client --rm -it --restart=Never --namespace $(NAMESPACE) \
		--image docker.io/bitnami/redis:7.2.4-debian-11-r0 -- bash -c \
		"REDISCLI_AUTH=$$($(MICROK8S) kubectl get secret $(RELEASE_NAME) -n $(NAMESPACE) -o jsonpath='{.data.redis-password}' | base64 -d) && \
		redis-cli -h $(RELEASE_NAME)-master.$(NAMESPACE).svc.cluster.local -p 6379 --tls --insecure"

connect-replica: ## Conecta a uma replica via CLI
	@echo "üîó Conectando ao Redis Replica..."
	kubectl run redis-client-replica --rm -it --restart=Never --namespace $(NAMESPACE) \
		--image docker.io/bitnami/redis:7.2.4-debian-11-r0 -- bash -c \
		"REDISCLI_AUTH=$$(kubectl get secret $(RELEASE_NAME) -n $(NAMESPACE) -o jsonpath='{.data.redis-password}' | base64 -d) && \
		redis-cli -h $(RELEASE_NAME)-replica.$(NAMESPACE).svc.cluster.local -p 6379 --tls --insecure"

# M√©tricas
metrics: ## Acessa m√©tricas via port-forward
	@echo "üìä Acessando m√©tricas (Ctrl+C para sair)..."
	@echo "URL: http://localhost:9121/metrics"
	$(MICROK8S) kubectl port-forward svc/$(RELEASE_NAME)-metrics 9121:9121 -n $(NAMESPACE)

metrics-curl: ## Mostra m√©tricas via curl
	@kubectl run metrics-test --rm -i --restart=Never --namespace $(NAMESPACE) \
		--image curlimages/curl:latest --command -- \
		curl -s http://$(RELEASE_NAME)-metrics.$(NAMESPACE).svc.cluster.local:9121/metrics | head -20

# Limpeza
clean: ## Remove recursos tempor√°rios
	@echo "üßπ Limpando recursos tempor√°rios..."
	kubectl delete pod -l "run in (redis-client,redis-test,metrics-test)" -n $(NAMESPACE) --ignore-not-found=true
	@echo "‚úÖ Limpeza conclu√≠da!"

remove: ## Remove completamente o Redis
	@echo "üóëÔ∏è Removendo Redis..."
	@./remove-redis-helm.sh

remove-force: ## Remove for√ßadamente (sem confirma√ß√£o)
	@echo "üóëÔ∏è Removendo Redis (for√ßa)..."
	helm uninstall $(RELEASE_NAME) -n $(NAMESPACE) || true
	kubectl delete pvc --all -n $(NAMESPACE) --ignore-not-found=true
	kubectl delete namespace $(NAMESPACE) --ignore-not-found=true
	@echo "‚úÖ Remo√ß√£o for√ßada conclu√≠da!"

# Debug
debug: ## Informa√ß√µes de debug
	@echo "üêõ Informa√ß√µes de Debug"
	@echo "======================"
	@echo "üì¶ Helm Release:"
	$(MICROK8S) helm3 status $(RELEASE_NAME) -n $(NAMESPACE)
	@echo ""
	@echo "üîç Describe Pods:"
	$(MICROK8S) kubectl describe pods -l app.kubernetes.io/name=redis -n $(NAMESPACE)
	@echo ""
	@echo "üîç Events:"
	$(MICROK8S) kubectl get events -n $(NAMESPACE) --sort-by='.lastTimestamp'

debug-master: ## Debug espec√≠fico do master
	kubectl describe pod $(RELEASE_NAME)-master-0 -n $(NAMESPACE)

debug-replica: ## Debug espec√≠fico das replicas
	kubectl describe pod $(RELEASE_NAME)-replica-0 -n $(NAMESPACE)

# Utilit√°rios
shell-master: ## Shell no pod master
	kubectl exec -it $(RELEASE_NAME)-master-0 -n $(NAMESPACE) -- bash

shell-replica: ## Shell no pod replica
	kubectl exec -it $(RELEASE_NAME)-replica-0 -n $(NAMESPACE) -- bash

top: ## Mostra uso de recursos dos pods
	kubectl top pods -n $(NAMESPACE)

watch: ## Monitora pods em tempo real
	watch kubectl get pods -n $(NAMESPACE)

# Valida√ß√£o
validate: ## Valida configura√ß√£o antes da instala√ß√£o
	@echo "‚úÖ Validando configura√ß√£o..."
	helm template $(RELEASE_NAME) $(CHART_NAME) --values $(VALUES_FILE) --dry-run > /dev/null
	@echo "‚úÖ Configura√ß√£o v√°lida!"

lint: ## Verifica sintaxe dos arquivos
	@echo "üîç Verificando sintaxe..."
	helm lint . || echo "‚ö†Ô∏è Lint n√£o aplic√°vel (n√£o √© um chart)"
	yamllint $(VALUES_FILE) $(HPA_FILE) || echo "‚ö†Ô∏è yamllint n√£o instalado"
	@echo "‚úÖ Verifica√ß√£o conclu√≠da!"